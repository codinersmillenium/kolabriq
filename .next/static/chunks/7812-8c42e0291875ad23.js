"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7812],{5598:(e,t,a)=>{a.d(t,{yK:()=>_,ZG:()=>F,YD:()=>O,uw:()=>R,b0:()=>w,D_:()=>f,Cc:()=>V,Jv:()=>b,CI:()=>k});var r=a(35558);let n=e=>{let{IDL:t}=e,a=t.Variant({ok:t.Text,err:t.Text}),r=t.Principal,n=t.Variant({sessionExpired:t.Null,logout:t.Null,login:t.Null}),c=t.Variant({admin:t.Null,maintainer:t.Null,developer:t.Null}),o=t.Variant({pro:t.Null,basic:t.Null}),i=t.Variant({authentication:t.Record({loginTime:t.Int,action:n}),updateName:t.Record({newFirst:t.Text,oldFirst:t.Text,newLast:t.Text,oldLast:t.Text}),updateRole:t.Record({oldRole:c,newRole:c}),planUpgrade:t.Record({newPlan:o,oldPlan:o}),registration:t.Null}),l=t.Variant({ui:t.Null,frontend:t.Null,business_analyst:t.Null,backend:t.Null}),s=t.Record({id:r,userName:t.Text,action:i,referrerCode:t.Opt(t.Text),plan_type:o,role:c,tags:t.Vec(l),personalRefCode:t.Text,lastName:t.Text,firstName:t.Text}),d=t.Variant({ok:s,err:t.Text}),u=t.Nat,p=t.Record({id:u,signature:t.Text,data:s,hash:t.Text,nonce:t.Nat,timestamp:t.Int,previousHash:t.Text}),g=t.Variant({ok:t.Vec(p),err:t.Text}),N=t.Record({tags:t.Opt(t.Vec(l)),keyword:t.Opt(t.Text),roles:t.Opt(t.Vec(c))}),m=t.Variant({ok:t.Vec(s),err:t.Null}),x=t.Variant({ok:t.Vec(s),err:t.Text}),y=t.Record({userName:t.Text,referrerCode:t.Opt(t.Text),role:c,tags:t.Vec(l),lastName:t.Text,firstName:t.Text});return t.Service({checkPrincipal:t.Func([],[t.Principal],["query"]),getTeamRefCode:t.Func([],[a],["query"]),getUserDetail:t.Func([t.Principal],[d],["query"]),getUserHistory:t.Func([t.Principal],[g],["query"]),getUserList:t.Func([N],[m],["query"]),getUsersByIds:t.Func([t.Vec(t.Principal)],[x],["query"]),healthCheck:t.Func([],[t.Record({lastBlockHash:t.Text,totalBlocks:t.Nat,chainIntegrity:t.Bool,totalUsers:t.Nat})],["query"]),login:t.Func([],[d],[]),logout:t.Func([],[d],[]),registerUser:t.Func([y],[d],[]),updateRole:t.Func([t.Principal,c],[d],[]),updateUser:t.Func([y],[d],[]),upgradePlan:t.Func([o],[d],[])})},c=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.agent||new r.qB({...t.agentOptions});return t.agent&&t.agentOptions&&console.warn("Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent."),a.fetchRootKey().catch(e=>{console.warn("Unable to fetch root key. Check to ensure that your local replica is running"),console.error(e)}),r.Ag.createActor(n,{agent:a,canisterId:e,...t.actorOptions})},o=e=>{let{IDL:t}=e,a=t.Variant({ok:t.Text,err:t.Text}),r=t.Variant({free:t.Null,rewarded:t.Null}),n=t.Variant({ui:t.Null,frontend:t.Null,business_analyst:t.Null,backend:t.Null}),c=t.Record({reward:t.Nat,thumbnail:t.Vec(t.Nat8),projectType:r,desc:t.Text,name:t.Text,tags:t.Vec(n)}),o=t.Nat,i=t.Variant({new:t.Null,review:t.Null,done:t.Null,in_progress:t.Null}),l=t.Variant({metadataUpdate:t.Record({field:t.Text,oldValue:t.Text,newValue:t.Text}),create:t.Null,rewardUpdate:t.Record({to:t.Nat,from:t.Nat}),statusUpdate:t.Record({to:i,from:i})}),s=t.Principal,d=t.Record({id:o,status:i,reward:t.Nat,action:l,thumbnail:t.Vec(t.Nat8),projectType:r,ownerId:s,desc:t.Text,name:t.Text,createdBy:s,tags:t.Vec(n)}),u=t.Variant({ok:d,err:t.Text}),p=t.Record({title:t.Text,endDate:t.Int,startDate:t.Int}),g=t.Nat,N=t.Variant({dateUpdate:t.Record({field:t.Text,oldValue:t.Int,newValue:t.Int}),metadataUpdate:t.Record({field:t.Text,oldValue:t.Text,newValue:t.Text}),create:t.Null}),m=t.Record({id:g,title:t.Text,action:N,endDate:t.Int,createdBy:s,projectId:o,startDate:t.Int}),x=t.Variant({ok:m,err:t.Text}),y=t.Record({status:t.Opt(i),projectType:t.Opt(r),tags:t.Opt(t.Vec(n)),keyword:t.Opt(t.Text)}),_=t.Variant({ok:t.Vec(d),err:t.Null}),f=t.Nat,T=t.Variant({assign:t.Null,unassign:t.Null}),h=t.Record({action:T,assignedBy:s,userId:s,projectId:o}),R=t.Variant({teamAssignment:h,project:d,timeline:m}),V=t.Record({id:f,signature:t.Text,data:R,hash:t.Text,nonce:t.Nat,timestamp:t.Int,previousHash:t.Text}),w=t.Variant({ok:t.Vec(V),err:t.Text}),O=t.Variant({ok:t.Vec(s),err:t.Text}),b=t.Variant({ok:t.Vec(m),err:t.Text}),k=t.Record({endDate:t.Int,project:d,startDate:t.Int}),F=t.Variant({ok:k,err:t.Text});return t.Service({assignProjectTeam:t.Func([t.Text,t.Nat,t.Vec(t.Principal)],[a],[]),createProject:t.Func([t.Text,c],[u],[]),createTimeline:t.Func([t.Nat,p],[x],[]),getOwnedProjectList:t.Func([t.Text,y],[_],["query"]),getProjectByKeyword:t.Func([t.Text,t.Text],[u],["query"]),getProjectDetail:t.Func([t.Nat],[u],["query"]),getProjectHistory:t.Func([t.Nat],[w],["query"]),getProjectTeam:t.Func([t.Nat],[O],["query"]),getProjectTimelines:t.Func([t.Nat],[b],["query"]),getTimelineDetail:t.Func([t.Nat],[x],["query"]),getTimelineHistory:t.Func([t.Nat],[w],["query"]),healthCheck:t.Func([],[t.Record({lastBlockHash:t.Text,totalTimelines:t.Nat,totalProjects:t.Nat,totalBlocks:t.Nat,chainIntegrity:t.Bool})],["query"]),saveLlmProjectTimelines:t.Func([t.Principal,c,t.Vec(p)],[F],[]),updateProjectReward:t.Func([t.Nat,t.Nat],[u],[]),updateProjectStatus:t.Func([t.Nat,i],[u],[]),updateTimeline:t.Func([t.Nat,p],[x],[])})},i=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.agent||new r.qB({...t.agentOptions});return t.agent&&t.agentOptions&&console.warn("Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent."),a.fetchRootKey().catch(e=>{console.warn("Unable to fetch root key. Check to ensure that your local replica is running"),console.error(e)}),r.Ag.createActor(o,{agent:a,canisterId:e,...t.actorOptions})},l=e=>{let{IDL:t}=e,a=t.Record({review:t.Text,taskId:t.Nat}),r=t.Nat,n=t.Principal,c=t.Variant({fix:t.Record({fixedBy:n}),create:t.Null,update:t.Record({oldReview:t.Text,newReview:t.Text})}),o=t.Nat,i=t.Record({id:r,review:t.Text,action:c,fixedById:t.Opt(n),reviewerId:n,taskId:o,fixedAt:t.Opt(t.Int)}),l=t.Variant({ok:i,err:t.Text}),s=t.Variant({ui:t.Null,frontend:t.Null,business_analyst:t.Null,backend:t.Null}),d=t.Record({tag:s,title:t.Text,desc:t.Text,dueDate:t.Int,projectId:t.Nat,assignees:t.Vec(t.Principal)}),u=t.Variant({done:t.Null,in_progress:t.Null,todo:t.Null}),p=t.Variant({assigneeUpdate:t.Record({added:t.Vec(n),removed:t.Vec(n)}),metadataUpdate:t.Record({field:t.Text,oldValue:t.Text,newValue:t.Text}),create:t.Null,statusUpdate:t.Record({to:u,from:u})}),g=t.Nat,N=t.Record({id:o,tag:s,status:u,title:t.Text,action:p,doneAt:t.Opt(t.Int),desc:t.Text,createdById:n,dueDate:t.Int,projectId:g,doneById:t.Opt(n),priority:t.Bool,assignees:t.Vec(n)}),m=t.Variant({ok:N,err:t.Text}),x=t.Variant({review:i,task:N}),y=t.Record({id:t.Nat,signature:t.Text,data:x,hash:t.Text,nonce:t.Nat,timestamp:t.Int,previousHash:t.Text}),_=t.Variant({ok:t.Vec(y),err:t.Text}),f=t.Record({tag:t.Opt(t.Vec(s)),status:t.Opt(t.Vec(u)),keyword:t.Opt(t.Text)}),T=t.Variant({ok:t.Vec(N),err:t.Null}),h=t.Variant({ok:t.Vec(i),err:t.Text}),R=t.Record({userId:n,totalOverdue:t.Nat,totalDone:t.Nat,totalTask:t.Nat}),V=t.Variant({ok:t.Vec(R),err:t.Text}),w=t.Variant({ok:t.Vec(t.Text),err:t.Text});return t.Service({addReview:t.Func([a],[l],[]),createTask:t.Func([d],[m],[]),getReviewHistory:t.Func([t.Nat],[_],["query"]),getTaskByKeyword:t.Func([t.Nat,t.Text],[m],["query"]),getTaskDetail:t.Func([t.Nat],[m],["query"]),getTaskHistory:t.Func([t.Nat],[_],["query"]),getTaskList:t.Func([t.Nat,t.Opt(f)],[T],["query"]),getTaskReviews:t.Func([t.Nat],[h],["query"]),getUserOverview:t.Func([t.Nat],[V],["query"]),healthCheck:t.Func([],[t.Record({totalTasks:t.Nat,lastBlockHash:t.Text,totalBlocks:t.Nat,chainIntegrity:t.Bool,totalReviews:t.Nat})],["query"]),projectAnalysis:t.Func([t.Nat],[t.Text],["query"]),saveLlmTasks:t.Func([t.Principal,t.Nat,t.Vec(d)],[w],[]),updateReview:t.Func([t.Nat,a],[l],[]),updateReviewFixed:t.Func([t.Nat],[l],[]),updateTaskMetadata:t.Func([t.Nat,d],[m],[]),updateTaskStatus:t.Func([t.Nat,u],[m],[])})},s=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.agent||new r.qB({...t.agentOptions});return t.agent&&t.agentOptions&&console.warn("Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent."),a.fetchRootKey().catch(e=>{console.warn("Unable to fetch root key. Check to ensure that your local replica is running"),console.error(e)}),r.Ag.createActor(l,{agent:a,canisterId:e,...t.actorOptions})},d=e=>{let{IDL:t}=e,a=t.Variant({free:t.Null,rewarded:t.Null}),r=t.Variant({ui:t.Null,frontend:t.Null,business_analyst:t.Null,backend:t.Null}),n=t.Record({reward:t.Nat,thumbnail:t.Vec(t.Nat8),projectType:a,desc:t.Text,name:t.Text,tags:t.Vec(r)}),c=t.Record({title:t.Text,endDate:t.Int,startDate:t.Int}),o=t.Record({tag:r,title:t.Text,desc:t.Text,dueDate:t.Int,projectId:t.Nat,assignees:t.Vec(t.Principal)}),i=t.Nat,l=t.Record({projectId:t.Opt(i),message:t.Text}),s=t.Variant({ok:l,err:t.Text});return t.Service({projectPlanner:t.Func([t.Principal,n,t.Vec(c),t.Vec(o)],[s],[])})},u=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.agent||new r.qB({...t.agentOptions});return t.agent&&t.agentOptions&&console.warn("Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent."),a.fetchRootKey().catch(e=>{console.warn("Unable to fetch root key. Check to ensure that your local replica is running"),console.error(e)}),r.Ag.createActor(d,{agent:a,canisterId:e,...t.actorOptions})},p=e=>{let{IDL:t}=e,a=t.Principal,r=t.Record({token:t.Nat,userId:a});return t.Service({balanceOf:t.Func([t.Principal],[t.Nat],["query"]),buyIn:t.Func([t.Nat],[t.Nat],[]),name:t.Func([],[t.Text],["query"]),symbol:t.Func([],[t.Text],["query"]),teamPayout:t.Func([t.Vec(r)],[t.Bool],[]),updateBalance:t.Func([t.Principal,t.Nat],[],[])})},g=a(49509).env.CANISTER_ID_TOKEN,N=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.agent||new r.qB({...t.agentOptions});return t.agent&&t.agentOptions&&console.warn("Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent."),a.fetchRootKey().catch(e=>{console.warn("Unable to fetch root key. Check to ensure that your local replica is running"),console.error(e)}),r.Ag.createActor(p,{agent:a,canisterId:e,...t.actorOptions})},m=e=>{let{IDL:t}=e,a=t.Vec(t.Nat8),r=t.Record({owner:t.Principal,subaccount:t.Opt(a)}),n=t.Record({icrc2:t.Bool}),c=t.Record({icrc1_minting_account:t.Opt(r),feature_flags:t.Opt(n)}),o=t.Record({e8s:t.Nat64}),i=t.Text,l=t.Record({secs:t.Nat64,nanos:t.Nat32}),s=t.Record({num_blocks_to_archive:t.Nat64,max_transactions_per_response:t.Opt(t.Nat64),trigger_threshold:t.Nat64,more_controller_ids:t.Opt(t.Vec(t.Principal)),max_message_size_bytes:t.Opt(t.Nat64),cycles_for_archive_creation:t.Opt(t.Nat64),node_max_memory_size_bytes:t.Opt(t.Nat64),controller_id:t.Principal}),d=t.Record({send_whitelist:t.Vec(t.Principal),token_symbol:t.Opt(t.Text),transfer_fee:t.Opt(o),minting_account:i,transaction_window:t.Opt(l),max_message_size_bytes:t.Opt(t.Nat64),icrc1_minting_account:t.Opt(r),archive_options:t.Opt(s),initial_values:t.Vec(t.Tuple(i,o)),token_name:t.Opt(t.Text),feature_flags:t.Opt(n)});t.Variant({Upgrade:t.Opt(c),Init:d});let u=t.Vec(t.Nat8),p=t.Record({account:u}),g=t.Record({account:i}),N=t.Record({canister_id:t.Principal}),m=t.Record({archives:t.Vec(N)}),x=t.Record({prev_spender_id:t.Opt(i),from_account_id:i,take:t.Opt(t.Nat64)}),y=t.Vec(t.Record({from_account_id:i,to_spender_id:i,allowance:o,expires_at:t.Opt(t.Nat64)})),_=t.Nat,f=t.Variant({Int:t.Int,Nat:t.Nat,Blob:t.Vec(t.Nat8),Text:t.Text}),T=t.Nat64,h=t.Record({to:r,fee:t.Opt(_),memo:t.Opt(t.Vec(t.Nat8)),from_subaccount:t.Opt(a),created_at_time:t.Opt(T),amount:_}),R=t.Nat,V=t.Variant({GenericError:t.Record({message:t.Text,error_code:t.Nat}),TemporarilyUnavailable:t.Null,BadBurn:t.Record({min_burn_amount:_}),Duplicate:t.Record({duplicate_of:R}),BadFee:t.Record({expected_fee:_}),CreatedInFuture:t.Record({ledger_time:t.Nat64}),TooOld:t.Null,InsufficientFunds:t.Record({balance:_})}),w=t.Variant({Ok:R,Err:V}),O=t.Record({utc_offset_minutes:t.Opt(t.Int16),language:t.Text}),b=t.Record({metadata:O,device_spec:t.Opt(t.Variant({GenericDisplay:t.Null,FieldsDisplay:t.Null}))}),k=t.Record({arg:t.Vec(t.Nat8),method:t.Text,user_preferences:b}),F=t.Variant({Text:t.Record({content:t.Text}),TokenAmount:t.Record({decimals:t.Nat8,amount:t.Nat64,symbol:t.Text}),TimestampSeconds:t.Record({amount:t.Nat64}),DurationSeconds:t.Record({amount:t.Nat64})}),v=t.Record({fields:t.Vec(t.Tuple(t.Text,F)),intent:t.Text}),q=t.Variant({FieldsDisplayMessage:v,GenericDisplayMessage:t.Text}),I=t.Record({metadata:O,consent_message:q}),D=t.Record({description:t.Text}),B=t.Variant({GenericError:t.Record({description:t.Text,error_code:t.Nat}),InsufficientPayment:D,UnsupportedCanisterCall:D,ConsentMessageUnavailable:D}),P=t.Variant({Ok:I,Err:B}),j=t.Record({account:r,spender:r}),C=t.Record({allowance:_,expires_at:t.Opt(T)}),A=t.Record({fee:t.Opt(_),memo:t.Opt(t.Vec(t.Nat8)),from_subaccount:t.Opt(a),created_at_time:t.Opt(T),amount:_,expected_allowance:t.Opt(_),expires_at:t.Opt(T),spender:r}),U=t.Variant({GenericError:t.Record({message:t.Text,error_code:t.Nat}),TemporarilyUnavailable:t.Null,Duplicate:t.Record({duplicate_of:R}),BadFee:t.Record({expected_fee:_}),AllowanceChanged:t.Record({current_allowance:_}),CreatedInFuture:t.Record({ledger_time:t.Nat64}),TooOld:t.Null,Expired:t.Record({ledger_time:t.Nat64}),InsufficientFunds:t.Record({balance:_})}),E=t.Variant({Ok:R,Err:U}),S=t.Record({to:r,fee:t.Opt(_),spender_subaccount:t.Opt(a),from:r,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(T),amount:_}),H=t.Variant({GenericError:t.Record({message:t.Text,error_code:t.Nat}),TemporarilyUnavailable:t.Null,InsufficientAllowance:t.Record({allowance:_}),BadBurn:t.Record({min_burn_amount:_}),Duplicate:t.Record({duplicate_of:R}),BadFee:t.Record({expected_fee:_}),CreatedInFuture:t.Record({ledger_time:T}),TooOld:t.Null,InsufficientFunds:t.Record({balance:_})}),L=t.Variant({Ok:R,Err:H}),G=t.Nat64,K=t.Record({start:G,length:t.Nat64}),z=t.Nat64,M=t.Record({timestamp_nanos:t.Nat64}),J=t.Variant({Approve:t.Record({fee:o,from:u,allowance_e8s:t.Int,allowance:o,expected_allowance:t.Opt(o),expires_at:t.Opt(M),spender:u}),Burn:t.Record({from:u,amount:o,spender:t.Opt(u)}),Mint:t.Record({to:u,amount:o}),Transfer:t.Record({to:u,fee:o,from:u,amount:o,spender:t.Opt(t.Vec(t.Nat8))})}),Y=t.Record({memo:z,icrc1_memo:t.Opt(t.Vec(t.Nat8)),operation:t.Opt(J),created_at_time:M}),Z=t.Record({transaction:Y,timestamp:M,parent_hash:t.Opt(t.Vec(t.Nat8))}),$=t.Record({blocks:t.Vec(Z)}),Q=t.Variant({BadFirstBlockIndex:t.Record({requested_index:G,first_valid_index:G}),Other:t.Record({error_message:t.Text,error_code:t.Nat64})}),W=t.Variant({Ok:$,Err:Q}),X=t.Func([K],[W],["query"]),ee=t.Record({callback:X,start:G,length:t.Nat64}),et=t.Record({certificate:t.Opt(t.Vec(t.Nat8)),blocks:t.Vec(Z),chain_length:t.Nat64,first_block_index:G,archived_blocks:t.Vec(ee)}),ea=t.Record({callback:t.Func([K],[t.Variant({Ok:t.Vec(t.Vec(t.Nat8)),Err:Q})],["query"]),start:t.Nat64,length:t.Nat64}),er=t.Record({certificate:t.Opt(t.Vec(t.Nat8)),blocks:t.Vec(t.Vec(t.Nat8)),chain_length:t.Nat64,first_block_index:t.Nat64,archived_blocks:t.Vec(ea)}),en=t.Record({fee:t.Opt(_),from_subaccount:t.Opt(a),spender:u}),ec=t.Record({to:i,fee:o,memo:z,from_subaccount:t.Opt(a),created_at_time:t.Opt(M),amount:o}),eo=t.Record({certification:t.Opt(t.Vec(t.Nat8)),tip_index:G}),ei=t.Record({to:u,fee:o,memo:z,from_subaccount:t.Opt(a),created_at_time:t.Opt(M),amount:o}),el=t.Variant({TxTooOld:t.Record({allowed_window_nanos:t.Nat64}),BadFee:t.Record({expected_fee:o}),TxDuplicate:t.Record({duplicate_of:G}),TxCreatedInFuture:t.Null,InsufficientFunds:t.Record({balance:o})}),es=t.Variant({Ok:G,Err:el}),ed=t.Record({}),eu=t.Record({transfer_fee:o});return t.Service({account_balance:t.Func([p],[o],["query"]),account_balance_dfx:t.Func([g],[o],["query"]),account_identifier:t.Func([r],[u],["query"]),archives:t.Func([],[m],["query"]),decimals:t.Func([],[t.Record({decimals:t.Nat32})],["query"]),get_allowances:t.Func([x],[y],["query"]),icrc10_supported_standards:t.Func([],[t.Vec(t.Record({url:t.Text,name:t.Text}))],["query"]),icrc1_balance_of:t.Func([r],[_],["query"]),icrc1_decimals:t.Func([],[t.Nat8],["query"]),icrc1_fee:t.Func([],[_],["query"]),icrc1_metadata:t.Func([],[t.Vec(t.Tuple(t.Text,f))],["query"]),icrc1_minting_account:t.Func([],[t.Opt(r)],["query"]),icrc1_name:t.Func([],[t.Text],["query"]),icrc1_supported_standards:t.Func([],[t.Vec(t.Record({url:t.Text,name:t.Text}))],["query"]),icrc1_symbol:t.Func([],[t.Text],["query"]),icrc1_total_supply:t.Func([],[_],["query"]),icrc1_transfer:t.Func([h],[w],[]),icrc21_canister_call_consent_message:t.Func([k],[P],[]),icrc2_allowance:t.Func([j],[C],["query"]),icrc2_approve:t.Func([A],[E],[]),icrc2_transfer_from:t.Func([S],[L],[]),is_ledger_ready:t.Func([],[t.Bool],["query"]),name:t.Func([],[t.Record({name:t.Text})],["query"]),query_blocks:t.Func([K],[et],["query"]),query_encoded_blocks:t.Func([K],[er],["query"]),remove_approval:t.Func([en],[E],[]),send_dfx:t.Func([ec],[G],[]),symbol:t.Func([],[t.Record({symbol:t.Text})],["query"]),tip_of_chain:t.Func([],[eo],["query"]),transfer:t.Func([ei],[es],[]),transfer_fee:t.Func([ed],[eu],["query"])})},x=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.agent||new r.qB({...t.agentOptions});return t.agent&&t.agentOptions&&console.warn("Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent."),a.fetchRootKey().catch(e=>{console.warn("Unable to fetch root key. Check to ensure that your local replica is running"),console.error(e)}),r.Ag.createActor(m,{agent:a,canisterId:e,...t.actorOptions})};var y=a(78558);let _=null,f=null,T={},h=async()=>{T={agentOptions:{host:"http://127.0.0.1:4943",identity:f=(_=await y.UJ.create()).getIdentity()}}},R=async()=>{_||await h()},V=async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"user";await R();var t=null;switch(e){case"user":t=c("by6od-j4aaa-aaaaa-qaadq-cai",T);break;case"project":t=i("br5f7-7uaaa-aaaaa-qaaca-cai",T);break;case"task":t=s("b77ix-eeaaa-aaaaa-qaada-cai",T);break;case"ai":t=u("bd3sg-teaaa-aaaaa-qaaba-cai",T);break;case"token":t=N(g,T);break;case"icp_ledger":t=x("ryjl3-tyaaa-aaaaa-aaaba-cai",T)}return t},w=()=>f.getPrincipal(),O=async()=>{await R();let e=await _.isAuthenticated();if(!f||!e)return"init";let t=await V(),{ok:a}=await F(t,"getUserDetail",w());return void 0!==a},b=async()=>{await R(),await _.login({identityProvider:"http://be2us-64aaa-aaaaa-qaabq-cai.localhost:4943/",onSuccess:async()=>{await V(),window.location.href="/login"}})},k=async()=>{await R(),await _.logout(),await V()},F=async function(e,t){let a;for(var r=arguments.length,n=Array(r>2?r-2:0),c=2;c<r;c++)n[c-2]=arguments[c];for(let r=0;r<=3;r++)try{if(!e||"function"!=typeof e[t])throw Error("Function ".concat(t," not found actor"));return await e[t](...n)}catch(e){if(a=e,console.log("Attempt ".concat(r+1," failed call ").concat(t,":"),e.message),3===r)break;if(e.message.includes("signature verification")||e.message.includes("certificate")||e.message.includes("Invalid certificate")||e.message.includes("network error")){_=null;let e=1e3*Math.pow(2,r);await new Promise(t=>setTimeout(t,e))}else break}throw a}},53999:(e,t,a)=>{a.d(t,{GJ:()=>s,Jv:()=>l,LS:()=>d,Yq:()=>o,cn:()=>c,qF:()=>i});var r=a(52596),n=a(39688);function c(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];return(0,n.QP)((0,r.$)(t))}function o(e){return new Date(1e3*Number(e)).toLocaleDateString("en-GB",{day:"2-digit",month:"short",year:"numeric"})}function i(){return new Date().toLocaleDateString("en-GB",{day:"2-digit",month:"short",year:"numeric"})}function l(e){return new Date(1e3*Number(e))<new Date}function s(e){return Math.round(1e8*e)}function d(e){return(Number(e)/1e8).toLocaleString("en-US",{maximumFractionDigits:8})}},88482:(e,t,a)=>{a.d(t,{Wu:()=>l,Zp:()=>o,aR:()=>i});var r=a(95155),n=a(12115),c=a(53999);let o=n.forwardRef((e,t)=>{let{className:a,...n}=e;return(0,r.jsx)("div",{ref:t,className:(0,c.cn)("shadow-3xl rounded-lg bg-white",a),...n})});o.displayName="Card";let i=n.forwardRef((e,t)=>{let{className:a,...n}=e;return(0,r.jsx)("div",{ref:t,className:(0,c.cn)("",a),...n})});i.displayName="CardHeader",n.forwardRef((e,t)=>{let{className:a,...n}=e;return(0,r.jsx)("h3",{ref:t,className:(0,c.cn)("",a),...n})}).displayName="CardTitle",n.forwardRef((e,t)=>{let{className:a,...n}=e;return(0,r.jsx)("p",{ref:t,className:(0,c.cn)("",a),...n})}).displayName="CardDescription";let l=n.forwardRef((e,t)=>{let{className:a,...n}=e;return(0,r.jsx)("div",{ref:t,className:(0,c.cn)("",a),...n})});l.displayName="CardContent",n.forwardRef((e,t)=>{let{className:a,...n}=e;return(0,r.jsx)("div",{ref:t,className:(0,c.cn)("",a),...n})}).displayName="CardFooter"},97168:(e,t,a)=>{a.d(t,{$:()=>s,r:()=>l});var r=a(95155),n=a(12115),c=a(99708),o=a(74466),i=a(53999);let l=(0,o.F)("inline-flex items-center justify-center gap-1.5 text-xs/4 duration-300 whitespace-nowrap outline-hidden font-medium text-center px-2.5 py-2 rounded-lg disabled:pointer-events-none disabled:opacity-30 transition [&>svg]:size-4 [&>svg]:shrink-0",{variants:{variant:{default:"bg-primary text-white hover:bg-[#2A4DD7]",black:"bg-black text-white hover:bg-[#3C3C3D]",outline:"ring-1 ring-inset ring-primary bg-white shadow-sm text-primary hover:bg-light-theme","outline-black":"ring-1 ring-inset ring-black bg-white shadow-sm text-black hover:bg-gray-200","outline-general":"ring-1 ring-inset ring-gray-300 bg-white shadow-sm text-black hover:bg-gray-200",ghost:"bg-none"},size:{default:"",small:"",large:"py-2 px-3 text-sm",extralarge:"font-semibold [&>svg]:size-[18px] rounded-[10px] text-sm py-[11px] px-3.5"}},defaultVariants:{variant:"default",size:"default"}}),s=n.forwardRef((e,t)=>{let{className:a,variant:n,size:o,asChild:s=!1,...d}=e,u=s?c.DX:"button";return(0,r.jsx)(u,{className:(0,i.cn)(l({variant:n,size:o,className:a})),ref:t,...d})});s.displayName="Button"}}]);